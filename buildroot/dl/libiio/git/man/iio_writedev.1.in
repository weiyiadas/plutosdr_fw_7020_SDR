.\" Copyright (c) 2018-2020 Robin Getz
.\" Copyright (c) 2018-2020 Analog Devices Inc.
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.TH iio_writedev 1 "@CMAKE_DATE@" "libiio-@LIBIIO_VERSION_MAJOR@.@LIBIIO_VERSION_MINOR@" "LibIIO Utilities"
.IX iio_writedev_
.SH NAME
iio_writedev \- write buffers on an IIO device
.SH SYNOPSIS
.B iio_writedev
[
.I options
]
[-t <trigger>] [-T <timeout-ms>] [-b <buffer-size>] [-s <samples>] <iio_device> [<channel> ...]
.SH DESCRIPTION
.B iio_reg
is a utility for writing buffers from connected IIO devices.

.SH OPTIONS
##COMMON_COMMANDS_START##
##COMMON_COMMANDS_STOP##
.TP
.B \-t \-\-trigger
Use the specified trigger, if needed on the specified channel
.TP
.B \-b \-\-buffer-size
Size of the capture buffer. Default is 256.
.TP
.B \-s \-\-samples
Number of samples (not bytes) to capture, 0 = infinite. Default is 0.
.TP
.B \-T \-\-timeout
Buffer timeout in milliseconds. 0 = no timeout. Default is 0.
.TP
.B \-c \-\-cyclic
Use cyclic buffer mode.
##COMMON_OPTION_START##
##COMMON_OPTION_STOP##

.SH RETURN VALUE
If the specified device is not found, a non-zero exit code is returned.

.SH "USAGE"
.PP 
You use iio_writedev in the same way you use many of the other libiio utilities.
You should specify a IIO device, and the specific channel to write. Since this is a write, channels must be output.
If no channel is provided, iio_writedev will write to all output channels.
If no device is provided, iio_writedev will print a few examples:
.RS
.B \f(CWiio_writedev -a\fP
.br
Using auto-detected IIO context at URI "usb:3.10.5"
.br
Example : iio_writedev -u usb:3.10.5 -b 256 -s 1024 cf-ad9361-dds-core-lpc voltage0
.br
Example : iio_writedev -u usb:3.10.5 -b 256 -s 1024 cf-ad9361-dds-core-lpc voltage1
.br
Example : iio_writedev -u usb:3.10.5 -b 256 -s 1024 cf-ad9361-dds-core-lpc voltage2
.br
Example : iio_writedev -u usb:3.10.5 -b 256 -s 1024 cf-ad9361-dds-core-lpc voltage3
.br
Example : iio_writedev -u usb:3.10.5 -b 256 -s 1024 cf-ad9361-dds-core-lpc
.RE
.PP
This sends 1024 samples of I and Q data to the USB attached AD9361. data is taking from standard in, in a binary format.
.RS
.B \f(CWiio_writedev \-a \-s 1024 cf-ad9361-dds-core-lpc voltage0 voltage1 < ./samples.dat\fP
.RE


